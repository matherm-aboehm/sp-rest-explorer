/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
{
    "env": {
        "browser": true,
        "node": true
    },
    "parserOptions": {
        "sourceType": "module"
    },
    "plugins": [
        "eslint-plugin-import",
        "eslint-plugin-jsdoc",
        "eslint-plugin-node",
        "@typescript-eslint",
        "@typescript-eslint/tslint"
    ],
    "extends": [
        "standard-with-typescript",
        "eslint:recommended",
        "plugin:prettier/recommended"
    ],
    "rules": {},
    "overrides": [
        {
            "files": [
                "**/*.+(ts|tsx)"
            ],
            "parser": "@typescript-eslint/parser",
            "parserOptions": {
                "project": "tsconfig.json"
            },
            "extends": [
                "plugin:prettier/recommended"
            ],
            "rules": {
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/consistent-type-assertions": "error",
                "@typescript-eslint/member-delimiter-style": [
                    "error",
                    {
                        "multiline": {
                            "delimiter": "none",
                            "requireLast": true
                        },
                        "singleline": {
                            "delimiter": "semi",
                            "requireLast": false
                        }
                    }
                ],
                "@typescript-eslint/naming-convention": "error",
                "@typescript-eslint/no-empty-function": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-unnecessary-qualifier": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unused-expressions": [
                    "error",
                    {
                        "allowTaggedTemplates": true,
                        "allowShortCircuit": true
                    }
                ],
                "@typescript-eslint/no-unused-vars": [
                    "error",
                    {
                        "vars": "all",
                        "varsIgnorePattern": "^_",
                        "args": "after-used",
                        "argsIgnorePattern": "^_"
                    }
                ],
                "@typescript-eslint/no-use-before-define": "error",
                "@typescript-eslint/prefer-namespace-keyword": "error",
                "@typescript-eslint/quotes": [
                    "error",
                    "single",
                    {
                        "avoidEscape": true
                    }
                ],
                "@typescript-eslint/semi": [
                    "error",
                    "never"
                ],
                "@typescript-eslint/triple-slash-reference": [
                    "error",
                    {
                        "path": "always",
                        "types": "prefer-import",
                        "lib": "always"
                    }
                ],
                "@typescript-eslint/type-annotation-spacing": "error",
                "@typescript-eslint/unified-signatures": "error",
                "arrow-spacing": [
                    "error",
                    {
                        "before": true,
                        "after": true
                    }
                ],
                "block-spacing": [
                    "error",
                    "always"
                ],
                "brace-style": [
                    "error",
                    "1tbs",
                    {
                        "allowSingleLine": true
                    }
                ],
                "comma-dangle": "error",
                "curly": [
                    "error",
                    "multi-line"
                ],
                "eol-last": "error",
                "eqeqeq": [
                    "error",
                    "smart"
                ],
                "func-call-spacing": [
                    "error",
                    "never"
                ],
                "id-denylist": [
                    "error",
                    "any",
                    "Number",
                    "number",
                    "String",
                    "string",
                    "Boolean",
                    "boolean",
                    "Undefined",
                    "undefined"
                ],
                "id-match": "error",
                "indent": [
                    "error",
                    2,
                    {
                        "SwitchCase": 1
                    }
                ],
                "import/no-deprecated": "error",
                "jsdoc/check-alignment": "error",
                "jsdoc/check-indentation": "error",
                "jsdoc/newline-after-description": "error",
                "linebreak-style": [
                    "error",
                    "unix"
                ],
                "new-parens": "error",
                "no-caller": "error",
                "no-cond-assign": "error",
                "no-constant-condition": "error",
                "no-control-regex": "error",
                "no-debugger": "error",
                "no-duplicate-case": "error",
                "no-duplicate-imports": "error",
                "no-empty": "error",
                "no-empty-character-class": "error",
                "no-empty-function": "error",
                "no-eval": "error",
                "no-ex-assign": "error",
                "no-extra-boolean-cast": "error",
                "no-fallthrough": "error",
                "no-inner-declarations": [
                    "error",
                    "functions"
                ],
                "no-invalid-regexp": "error",
                "no-irregular-whitespace": "error",
                "no-multi-spaces": "error",
                "no-multiple-empty-lines": "error",
                "no-redeclare": "error",
                "no-regex-spaces": "error",
                "no-return-await": "error",
                "no-sparse-arrays": "error",
                "no-throw-literal": "error",
                "no-trailing-spaces": "error",
                "no-underscore-dangle": "error",
                "no-unexpected-multiline": "error",
                "no-unused-expressions": "error",
                "no-unused-labels": "error",
                "no-unused-vars": [
                    "error",
                    {
                        "vars": "all",
                        "varsIgnorePattern": "^_",
                        "args": "after-used",
                        "argsIgnorePattern": "^_"
                    }
                ],
                "no-use-before-define": "error",
                "no-var": "error",
                "node/handle-callback-err": [
                    "error",
                    "^(err|error)$"
                ],
                "object-curly-spacing": [
                    "error",
                    "always"
                ],
                "one-var": [
                    "error",
                    "never"
                ],
                "quotes": "error",
                "radix": "error",
                "semi": "error",
                "space-before-function-paren": "off",
                "space-in-parens": [
                    "error",
                    "never"
                ],
                "spaced-comment": [
                    "error",
                    "always",
                    {
                        "markers": [
                            "/"
                        ]
                    }
                ],
                "use-isnan": "error",
                "valid-typeof": "error",
                "@typescript-eslint/tslint/config": [
                    "error",
                    {
                        "rules": {
                            "strict-type-predicates": true,
                            "whitespace": [
                                true,
                                "check-branch",
                                "check-decl",
                                "check-operator",
                                "check-rest-spread",
                                "check-type",
                                "check-typecast",
                                "check-type-operator",
                                "check-preblock"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "files": [
                "*.d.ts"
            ],
            "rules": {
                "@typescript-eslint/quotes": [
                    "error",
                    "double",
                    {
                        "avoidEscape": true
                    }
                ],
                "quotes": [
                    "error",
                    "double",
                    {
                        "avoidEscape": true
                    }
                ],
                "@typescript-eslint/no-extraneous-class": "off",
                "@typescript-eslint/no-unused-vars": "off",
                "no-unused-vars": "off",
                "@typescript-eslint/member-delimiter-style": [
                    "error",
                    {
                        "multiline": {
                            "delimiter": "semi",
                            "requireLast": true
                        },
                        "singleline": {
                            "delimiter": "semi",
                            "requireLast": false
                        }
                    }
                ],
                "@typescript-eslint/semi": [
                    "error",
                    "always"
                ],
                "semi": [
                    "error",
                    "always"
                ],
                "prettier/prettier": [
                    "error",
                    {
                        "singleQuote": false,
                        "semi": true,
                        "tabWidth": 2
                    }
                ]
            }
        },
        {
            "files": [
                "*.vue"
            ],
            "parser": "vue-eslint-parser",
            "parserOptions": {
                "sourceType": "module",
                "parser": {
                    "js": "espree",
                    "ts": "@typescript-eslint/parser",
                    "<template>": "espree"
                }
            },
            "extends": [
                "standard-with-typescript",
                "plugin:vue/recommended",
                "plugin:prettier/recommended"
            ]
        }
    ]
}
